{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b6e8c5db",
   "metadata": {},
   "source": [
    "First model is a simple one with no data augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "36c5f93a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n",
      "7/7 [==============================] - 2s 210ms/step - loss: 570.5031 - accuracy: 0.2139\n",
      "Epoch 2/15\n",
      "7/7 [==============================] - 1s 209ms/step - loss: 27.9131 - accuracy: 0.2637\n",
      "Epoch 3/15\n",
      "7/7 [==============================] - 1s 209ms/step - loss: 2.0189 - accuracy: 0.3831\n",
      "Epoch 4/15\n",
      "7/7 [==============================] - 1s 207ms/step - loss: 1.2498 - accuracy: 0.4925\n",
      "Epoch 5/15\n",
      "7/7 [==============================] - 2s 219ms/step - loss: 0.9846 - accuracy: 0.7612\n",
      "Epoch 6/15\n",
      "7/7 [==============================] - 2s 241ms/step - loss: 0.6176 - accuracy: 0.8308\n",
      "Epoch 7/15\n",
      "7/7 [==============================] - 2s 218ms/step - loss: 0.5745 - accuracy: 0.8507\n",
      "Epoch 8/15\n",
      "7/7 [==============================] - 2s 218ms/step - loss: 0.4726 - accuracy: 0.8458\n",
      "Epoch 9/15\n",
      "7/7 [==============================] - 2s 210ms/step - loss: 0.3412 - accuracy: 0.9154\n",
      "Epoch 10/15\n",
      "7/7 [==============================] - 2s 225ms/step - loss: 0.2567 - accuracy: 0.9602\n",
      "Epoch 11/15\n",
      "7/7 [==============================] - 1s 205ms/step - loss: 0.3191 - accuracy: 0.9403\n",
      "Epoch 12/15\n",
      "7/7 [==============================] - 2s 215ms/step - loss: 0.2778 - accuracy: 0.9552\n",
      "Epoch 13/15\n",
      "7/7 [==============================] - 2s 228ms/step - loss: 0.2489 - accuracy: 0.9602\n",
      "Epoch 14/15\n",
      "7/7 [==============================] - 1s 210ms/step - loss: 0.3251 - accuracy: 0.9005\n",
      "Epoch 15/15\n",
      "7/7 [==============================] - 2s 210ms/step - loss: 0.2164 - accuracy: 0.9602\n",
      "Found 45 images belonging to 5 classes.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Trenton\\AppData\\Local\\Temp\\ipykernel_528\\2816035399.py:73: UserWarning: `Model.evaluate_generator` is deprecated and will be removed in a future version. Please use `Model.evaluate`, which supports generators.\n",
      "  loss, accuracy = model.evaluate_generator(test_generator)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 0.31111112236976624\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "train_data_dir = r\"C:\\Users\\Trenton\\Documents\\GitHub\\Crops-Capstone-3\\crop_images\"\n",
    "test_data_dir = r\"C:\\Users\\Trenton\\Documents\\GitHub\\Crops-Capstone-3\\test_crop_image\"\n",
    "\n",
    "# class labels\n",
    "class_labels = sorted(os.listdir(train_data_dir))\n",
    "\n",
    "# Convert class labels to integer indices\n",
    "class_indices = {class_label: index for index, class_label in enumerate(class_labels)}\n",
    "\n",
    "# arrays\n",
    "train_data = []\n",
    "train_labels = []\n",
    "\n",
    "# Loop through each class to collect training data\n",
    "for class_label in class_labels:\n",
    "    class_dir = os.path.join(train_data_dir, class_label)\n",
    "    image_files = os.listdir(class_dir)\n",
    "    \n",
    "    for image_name in image_files:\n",
    "        image_path = os.path.join(class_dir, image_name)\n",
    "        image = tf.keras.preprocessing.image.load_img(image_path, target_size=(128, 128))\n",
    "        image_array = tf.keras.preprocessing.image.img_to_array(image)\n",
    "        train_data.append(image_array)\n",
    "        train_labels.append(class_indices[class_label])\n",
    "\n",
    "# Convert lists to arrays\n",
    "train_data = np.array(train_data)\n",
    "train_labels = np.array(train_labels)\n",
    "\n",
    "# Convert labels to one-hot encoded vectors\n",
    "train_labels_onehot = to_categorical(train_labels, num_classes=len(class_labels))\n",
    "\n",
    "# Build a simple CNN model\n",
    "model = Sequential([\n",
    "    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Conv2D(64, (3, 3), activation='relu'),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Flatten(),\n",
    "    Dense(128, activation='relu'),\n",
    "    Dropout(0.5),\n",
    "    Dense(len(class_labels), activation='softmax')  # Output layer with units equal to the number of classes\n",
    "])\n",
    "\n",
    "# Compile\n",
    "model.compile(optimizer=Adam(learning_rate=0.001),\n",
    "              loss='categorical_crossentropy',  # Use categorical_crossentropy for multi-class\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "# Train\n",
    "history = model.fit(train_data, train_labels_onehot, epochs=15, batch_size=32)\n",
    "history1 = history\n",
    "\n",
    "# Load and preprocess\n",
    "test_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.0/255.0)\n",
    "test_generator = test_datagen.flow_from_directory(\n",
    "    test_data_dir,\n",
    "    target_size=(128, 128),\n",
    "    batch_size=32,\n",
    "    class_mode='categorical',\n",
    "    shuffle=False\n",
    ")\n",
    "\n",
    "# Evaluate the model on the test data\n",
    "loss, accuracy = model.evaluate_generator(test_generator)\n",
    "print(\"Test Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d86d866",
   "metadata": {},
   "source": [
    "Let's try the same model but adding data augmentation using the ImageDataGenerator "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "41a15ec9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 201 images belonging to 5 classes.\n",
      "Found 45 images belonging to 5 classes.\n",
      "Epoch 1/15\n",
      "7/7 [==============================] - 2s 231ms/step - loss: 1.6042 - accuracy: 0.2338\n",
      "Epoch 2/15\n",
      "7/7 [==============================] - 2s 223ms/step - loss: 1.5871 - accuracy: 0.2786\n",
      "Epoch 3/15\n",
      "7/7 [==============================] - 2s 234ms/step - loss: 1.5669 - accuracy: 0.2687\n",
      "Epoch 4/15\n",
      "7/7 [==============================] - 2s 239ms/step - loss: 1.5368 - accuracy: 0.3184\n",
      "Epoch 5/15\n",
      "7/7 [==============================] - 2s 224ms/step - loss: 1.4895 - accuracy: 0.3731\n",
      "Epoch 6/15\n",
      "7/7 [==============================] - 2s 231ms/step - loss: 1.4571 - accuracy: 0.3781\n",
      "Epoch 7/15\n",
      "7/7 [==============================] - 2s 230ms/step - loss: 1.4871 - accuracy: 0.3184\n",
      "Epoch 8/15\n",
      "7/7 [==============================] - 2s 224ms/step - loss: 1.3959 - accuracy: 0.4378\n",
      "Epoch 9/15\n",
      "7/7 [==============================] - 2s 258ms/step - loss: 1.4494 - accuracy: 0.3433\n",
      "Epoch 10/15\n",
      "7/7 [==============================] - 2s 230ms/step - loss: 1.3744 - accuracy: 0.3632\n",
      "Epoch 11/15\n",
      "7/7 [==============================] - 2s 226ms/step - loss: 1.3975 - accuracy: 0.4577\n",
      "Epoch 12/15\n",
      "7/7 [==============================] - 2s 220ms/step - loss: 1.3534 - accuracy: 0.4726\n",
      "Epoch 13/15\n",
      "7/7 [==============================] - 2s 227ms/step - loss: 1.3249 - accuracy: 0.4328\n",
      "Epoch 14/15\n",
      "7/7 [==============================] - 2s 232ms/step - loss: 1.3245 - accuracy: 0.4378\n",
      "Epoch 15/15\n",
      "7/7 [==============================] - 2s 285ms/step - loss: 1.3152 - accuracy: 0.4478\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Trenton\\AppData\\Local\\Temp\\ipykernel_528\\3488843209.py:32: UserWarning: `Model.evaluate_generator` is deprecated and will be removed in a future version. Please use `Model.evaluate`, which supports generators.\n",
      "  loss, accuracy = model.evaluate_generator(test_generator)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 0.4444444477558136\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "train_datagen = ImageDataGenerator(\n",
    "    rescale=1.0/255.0,\n",
    "    rotation_range=20,\n",
    "    width_shift_range=0.2,\n",
    "    height_shift_range=0.2,\n",
    "    shear_range=0.2,\n",
    "    zoom_range=0.2,\n",
    "    horizontal_flip=True\n",
    ")\n",
    "\n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "    train_data_dir,\n",
    "    target_size=(128, 128),\n",
    "    batch_size=32,\n",
    "    class_mode='categorical'\n",
    ")\n",
    "\n",
    "test_datagen = ImageDataGenerator(rescale=1.0/255.0)\n",
    "\n",
    "test_generator = test_datagen.flow_from_directory(\n",
    "    test_data_dir,\n",
    "    target_size=(128, 128),\n",
    "    batch_size=32,\n",
    "    class_mode='categorical',\n",
    "    shuffle=False\n",
    ")\n",
    "\n",
    "history = model.fit(train_generator, epochs=15)\n",
    "history2 = history\n",
    "loss, accuracy = model.evaluate_generator(test_generator)\n",
    "print(\"Test Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "979f3baa",
   "metadata": {},
   "source": [
    "The next model with have a higher batch_size and a smaller learning_rate to see if that increases testing accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5efa4e8e",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n",
      "7/7 [==============================] - 3s 339ms/step - loss: 1.7162 - accuracy: 0.2338 - val_loss: 1.5773 - val_accuracy: 0.3333\n",
      "Epoch 2/15\n",
      "7/7 [==============================] - 2s 291ms/step - loss: 1.6890 - accuracy: 0.2139 - val_loss: 1.5931 - val_accuracy: 0.2000\n",
      "Epoch 3/15\n",
      "7/7 [==============================] - 2s 289ms/step - loss: 1.5917 - accuracy: 0.2786 - val_loss: 1.5326 - val_accuracy: 0.4000\n",
      "Epoch 4/15\n",
      "7/7 [==============================] - 2s 280ms/step - loss: 1.5544 - accuracy: 0.3333 - val_loss: 1.5003 - val_accuracy: 0.4444\n",
      "Epoch 5/15\n",
      "7/7 [==============================] - 2s 299ms/step - loss: 1.5504 - accuracy: 0.2836 - val_loss: 1.4570 - val_accuracy: 0.4889\n",
      "Epoch 6/15\n",
      "7/7 [==============================] - 2s 316ms/step - loss: 1.5198 - accuracy: 0.3881 - val_loss: 1.3711 - val_accuracy: 0.5111\n",
      "Epoch 7/15\n",
      "7/7 [==============================] - 2s 293ms/step - loss: 1.4854 - accuracy: 0.3831 - val_loss: 1.3552 - val_accuracy: 0.5778\n",
      "Epoch 8/15\n",
      "7/7 [==============================] - 2s 277ms/step - loss: 1.4612 - accuracy: 0.3483 - val_loss: 1.3078 - val_accuracy: 0.6222\n",
      "Epoch 9/15\n",
      "7/7 [==============================] - 2s 312ms/step - loss: 1.4524 - accuracy: 0.4179 - val_loss: 1.3361 - val_accuracy: 0.5111\n",
      "Epoch 10/15\n",
      "7/7 [==============================] - 2s 272ms/step - loss: 1.4720 - accuracy: 0.3383 - val_loss: 1.2850 - val_accuracy: 0.4889\n",
      "Epoch 11/15\n",
      "7/7 [==============================] - 2s 283ms/step - loss: 1.4277 - accuracy: 0.4229 - val_loss: 1.3024 - val_accuracy: 0.4222\n",
      "Epoch 12/15\n",
      "7/7 [==============================] - 2s 331ms/step - loss: 1.4357 - accuracy: 0.3483 - val_loss: 1.2870 - val_accuracy: 0.4444\n",
      "Epoch 13/15\n",
      "7/7 [==============================] - 2s 282ms/step - loss: 1.3613 - accuracy: 0.4428 - val_loss: 1.2133 - val_accuracy: 0.6444\n",
      "Epoch 14/15\n",
      "7/7 [==============================] - 2s 279ms/step - loss: 1.4122 - accuracy: 0.3682 - val_loss: 1.2042 - val_accuracy: 0.5556\n",
      "Epoch 15/15\n",
      "7/7 [==============================] - 2s 272ms/step - loss: 1.3818 - accuracy: 0.4328 - val_loss: 1.1695 - val_accuracy: 0.5556\n",
      "2/2 [==============================] - 0s 105ms/step - loss: 1.1695 - accuracy: 0.5556\n",
      "Test Accuracy: 0.5555555820465088\n"
     ]
    }
   ],
   "source": [
    "# hyperparameters\n",
    "batch_size = 64\n",
    "epochs = 15\n",
    "learning_rate = 0.0001\n",
    "\n",
    "# Rest of your code remains the same\n",
    "\n",
    "# Build a simple CNN model\n",
    "model = Sequential([\n",
    "    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Conv2D(64, (3, 3), activation='relu'),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Flatten(),\n",
    "    Dense(128, activation='relu'),\n",
    "    Dropout(0.5),\n",
    "    Dense(len(class_labels), activation='softmax')\n",
    "])\n",
    "\n",
    "# Compile the model with adjusted learning rate\n",
    "model.compile(optimizer=Adam(learning_rate=learning_rate),\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "# Calculate steps_per_epoch and validation_steps\n",
    "train_steps = len(train_generator)\n",
    "test_steps = len(test_generator)\n",
    "\n",
    "# Train\n",
    "history = model.fit(train_generator, epochs=epochs, steps_per_epoch=train_steps,\n",
    "                    validation_data=test_generator, validation_steps=test_steps)\n",
    "history3 = history\n",
    "\n",
    "# Evaluate\n",
    "loss, accuracy = model.evaluate(test_generator, steps=test_steps)\n",
    "print(\"Test Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "273b8ca7",
   "metadata": {},
   "source": [
    "The model below includes data augmentation and a much deeper network consisting of more nodes. The learning_rate is changed back to 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7b81e66e",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 201 images belonging to 5 classes.\n",
      "Epoch 1/15\n",
      "7/7 [==============================] - 8s 945ms/step - loss: 7.0458 - accuracy: 0.2239 - val_loss: 2.0506 - val_accuracy: 0.1556\n",
      "Epoch 2/15\n",
      "7/7 [==============================] - 6s 891ms/step - loss: 8.8999 - accuracy: 0.3134 - val_loss: 7.1923 - val_accuracy: 0.2889\n",
      "Epoch 3/15\n",
      "7/7 [==============================] - 7s 915ms/step - loss: 11.1740 - accuracy: 0.3284 - val_loss: 5.0692 - val_accuracy: 0.0667\n",
      "Epoch 4/15\n",
      "7/7 [==============================] - 7s 956ms/step - loss: 9.4458 - accuracy: 0.3532 - val_loss: 6.6567 - val_accuracy: 0.1333\n",
      "Epoch 5/15\n",
      "7/7 [==============================] - 6s 893ms/step - loss: 11.3865 - accuracy: 0.2935 - val_loss: 7.4954 - val_accuracy: 0.2889\n",
      "Epoch 6/15\n",
      "7/7 [==============================] - 7s 913ms/step - loss: 11.5337 - accuracy: 0.3532 - val_loss: 9.7573 - val_accuracy: 0.2000\n",
      "Epoch 7/15\n",
      "7/7 [==============================] - 7s 906ms/step - loss: 11.6110 - accuracy: 0.3234 - val_loss: 17.7442 - val_accuracy: 0.2889\n",
      "Epoch 8/15\n",
      "7/7 [==============================] - 6s 903ms/step - loss: 12.1310 - accuracy: 0.2836 - val_loss: 15.1195 - val_accuracy: 0.3111\n",
      "Epoch 9/15\n",
      "7/7 [==============================] - 6s 890ms/step - loss: 9.4137 - accuracy: 0.3731 - val_loss: 11.1894 - val_accuracy: 0.2889\n",
      "Epoch 10/15\n",
      "7/7 [==============================] - 6s 1s/step - loss: 9.0252 - accuracy: 0.3483 - val_loss: 3.7504 - val_accuracy: 0.3333\n",
      "Epoch 11/15\n",
      "7/7 [==============================] - 6s 942ms/step - loss: 8.9271 - accuracy: 0.2836 - val_loss: 2.7253 - val_accuracy: 0.3111\n",
      "Epoch 12/15\n",
      "7/7 [==============================] - 6s 869ms/step - loss: 6.2407 - accuracy: 0.2985 - val_loss: 3.7498 - val_accuracy: 0.3333\n",
      "Epoch 13/15\n",
      "7/7 [==============================] - 6s 866ms/step - loss: 6.5326 - accuracy: 0.2985 - val_loss: 1.8159 - val_accuracy: 0.3556\n",
      "Epoch 14/15\n",
      "7/7 [==============================] - 6s 856ms/step - loss: 6.0443 - accuracy: 0.2886 - val_loss: 2.1614 - val_accuracy: 0.2889\n",
      "Epoch 15/15\n",
      "7/7 [==============================] - 6s 942ms/step - loss: 4.7188 - accuracy: 0.2985 - val_loss: 1.8336 - val_accuracy: 0.3333\n",
      "2/2 [==============================] - 0s 90ms/step - loss: 1.8336 - accuracy: 0.3333\n",
      "Test Accuracy: 0.3333333432674408\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.layers import BatchNormalization\n",
    "\n",
    "datagen = ImageDataGenerator(\n",
    "    rescale=1.0/255.0,  \n",
    "    rotation_range=20,   \n",
    "    width_shift_range=0.2,  \n",
    "    height_shift_range=0.2, \n",
    "    zoom_range=0.2,      \n",
    "    horizontal_flip=True,\n",
    ")\n",
    "\n",
    "train_generator = datagen.flow_from_directory(\n",
    "    train_data_dir,\n",
    "    target_size=(128, 128),\n",
    "    batch_size=32,\n",
    "    class_mode='categorical'\n",
    ")\n",
    "\n",
    "model = Sequential([\n",
    "    Conv2D(64, (3, 3), activation='relu', input_shape=(128, 128, 3)),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Conv2D(128, (3, 3), activation='relu'),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    BatchNormalization(),\n",
    "    Conv2D(256, (3, 3), activation='relu'),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    BatchNormalization(),\n",
    "    Conv2D(512, (3, 3), activation='relu'),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    BatchNormalization(),\n",
    "    Flatten(),\n",
    "    Dense(512, activation='relu'),\n",
    "    Dropout(0.5),\n",
    "    Dense(256, activation='relu'),\n",
    "    Dropout(0.5),\n",
    "    Dense(len(class_labels), activation='softmax')\n",
    "])\n",
    "\n",
    "# Compile\n",
    "model.compile(optimizer=Adam(learning_rate=0.001),\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "# Train\n",
    "history = model.fit(train_generator, epochs=15, steps_per_epoch=train_steps,\n",
    "                    validation_data=test_generator, validation_steps=test_steps)\n",
    "history4 = history\n",
    "\n",
    "# Evaluate\n",
    "loss, accuracy = model.evaluate(test_generator)\n",
    "print(\"Test Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ee6f1862",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# List of training histories for each network\n",
    "histories = [history1, history2, history3, history4]  # Replace with actual histories\n",
    "test_accuracies = [0.311, 0.444, 0.555, 0.333]  # Replace with actual test accuracies\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot training accuracy with custom labels\n",
    "for idx, (history, test_accuracy) in enumerate(zip(histories, test_accuracies)):\n",
    "    label = f'Model {idx+1} (Test Acc: {test_accuracy:.2f})'  # Custom label\n",
    "    plt.plot(history.history['accuracy'], label=label)\n",
    "    \n",
    "    # Add dashed lines for test accuracy\n",
    "    color = plt.gca().lines[-1].get_color()  # Get the color of the last plotted line\n",
    "    plt.axhline(y=test_accuracy, color=color, linestyle='--', label='Test Acc')\n",
    "\n",
    "plt.title('Training and Test Accuracy Comparison')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a5091d8",
   "metadata": {},
   "source": [
    "Model 1 seemed to do the best job at fitting the training data, but it seemed to overfit since the test prediction was the lowest of all 4 models. Model 4 was the second lowest which possibly suggests that the network was too large for the data. Model 2 increased the accuracy from model 1 since it added data augmentation. Model 3 scored the best at 0.56 which is when we increased the batch size and lowered the learning rate. In future models I would add data augmentation to model 3 as well as try different learning rates.  "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
